<?php

namespace Laradic\Generators\DocBlock;

use Illuminate\Support\Str;
use Illuminate\Support\Collection;
use Barryvdh\Reflection\DocBlock\Tag;
use Barryvdh\Reflection\DocBlock\Tag\MethodTag;
use Barryvdh\Reflection\DocBlock\Tag\PropertyTag;

/**
 * @method \Barryvdh\Reflection\DocBlock\Tag[] all()
 */
class TagCollection extends Collection
{
    /** @var \Barryvdh\Reflection\DocBlock\Tag[] */
    protected $items = [];

    protected function types()
    {
        return [
            'method'         => [
                'tagType'      => Tag\MethodTag::class,
                'nameResolver' => function (Tag\MethodTag $tag) {
                    return $tag->getMethodName();
                },
            ],
            'param'          => [
                'tagType'      => Tag\ParamTag::class,
                'nameResolver' => function (Tag\ParamTag $tag) {
                    return $tag->getVariableName();
                },
            ],
            'property-read'  => [
                'tagType'      => Tag\PropertyReadTag::class,
                'nameResolver' => function (Tag\PropertyReadTag $tag) {
                    return $tag->getVariableName();
                },
            ],
            'property'       => [
                'tagType'      => Tag\PropertyTag::class,
                'nameResolver' => function (Tag\PropertyTag $tag) {
                    return $tag->getVariableName();
                },
            ],
            'property-write' => [
                'tagType'      => Tag\PropertyWriteTag::class,
                'nameResolver' => function (Tag\PropertyWriteTag $tag) {
                    return $tag->getVariableName();
                },
            ],
            'var'            => [
                'tagType'      => Tag\VarTag::class,
                'nameResolver' => function (Tag\VarTag $tag) {
                    return $tag->getVariableName();
                },
            ],
            'author'         => [ 'tagType' => Tag\AuthorTag::class, 'nameResolver' => null ],
            'covers'         => [ 'tagType' => Tag\CoversTag::class, 'nameResolver' => null ],
            'deprecated'     => [ 'tagType' => Tag\DeprecatedTag::class, 'nameResolver' => null ],
            'example'        => [ 'tagType' => Tag\ExampleTag::class, 'nameResolver' => null ],
            'link'           => [ 'tagType' => Tag\LinkTag::class, 'nameResolver' => null ],
            'return'         => [ 'tagType' => Tag\ReturnTag::class, 'nameResolver' => null ],
            'see'            => [ 'tagType' => Tag\SeeTag::class, 'nameResolver' => null ],
            'since'          => [ 'tagType' => Tag\SinceTag::class, 'nameResolver' => null ],
            'source'         => [ 'tagType' => Tag\SourceTag::class, 'nameResolver' => null ],
            'throws'         => [ 'tagType' => Tag\ThrowsTag::class, 'nameResolver' => null ],
            'uses'           => [ 'tagType' => Tag\UsesTag::class, 'nameResolver' => null ],
            'version'        => [ 'tagType' => Tag\VersionTag::class, 'nameResolver' => null ],
        ];
    }

    public function type($tag)
    {
        $types = collect($this->types());
        // support '{tagType}' like '\Barryvdh\Reflection\DocBlock\Tag\VersionTag'
        if (Str::endsWith($tag, 'Tag')) {
            $type = $types->firstWhere('tagType', $tag);
        } else {
            // support '@{tag}' like '@method'
            if (Str::startsWith($tag, '@')) {
                $tag = substr($tag, 1);
            }
            // support '{tag}' like 'method'
            $type = $types->get($tag);
        }
        $items = $this->filter(function (Tag $item) use ($type) {
            return $item instanceof $type[ 'tagType' ];
        })->all();
        return TagTypeCollection::makeForTag($type[ 'tagType' ], $type[ 'nameResolver' ], $items);
    }

    public function other()
    {
        return static::make(
            $this
                ->filter(function ($item) {
                    return ! $item instanceof PropertyTag && ! $item instanceof MethodTag;
                })
                ->all()
        );
    }

}
